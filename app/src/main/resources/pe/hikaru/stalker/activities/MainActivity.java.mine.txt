package pe.hikaru.stalker.activities;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.os.AsyncTask;
import android.os.Bundle;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.util.Patterns;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class MainActivity extends Activity {

	Button btnAndroidPost;
	Button btnAndroidGet;
	Button btnAndroidDesfase;
	TextView lblInfo;
	String email;
	String mensaje;
	long webms;
	long androidms;
	boolean escucha = false;
	String url = "http://stalker.tegobijava.cloudbees.net/";
	HugeWork task = null;
	String idaccion = "0";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		btnAndroidPost = (Button) findViewById(R.id.btnAndroidPost);
		btnAndroidGet = (Button) findViewById(R.id.btnAndroidGet);
		btnAndroidDesfase = (Button) findViewById(R.id.btnAndroidDesfase);
		lblInfo = (TextView) findViewById(R.id.lblInfo);
		email = obtenerCorreo();
		obtenerTime();
		androidms = (new Date()).getTime();
		mensaje = ((webms - androidms) / 1000) + "." + ((webms - androidms) % 1000);

		btnAndroidPost.setOnClickListener(new View.OnClickListener() {
			@SuppressLint("SimpleDateFormat")
			@Override
			public void onClick(View v) {

				String horaandroid = (new SimpleDateFormat("HH:mm:ss.SSS")).format(new Date());
				HttpClient client = new DefaultHttpClient();
				HttpPost post = new HttpPost(url + "drone?acc=androidpost");
				List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
				postParameters.add(new BasicNameValuePair("email", email));
				postParameters.add(new BasicNameValuePair("horaandroid", horaandroid));
				postParameters.add(new BasicNameValuePair("mensaje", mensaje));
				UrlEncodedFormEntity formEntity;
				try {
					formEntity = new UrlEncodedFormEntity(postParameters);
					post.setEntity(formEntity);
					HttpResponse response = client.execute(post);
					String data = inputStreamToString(response.getEntity().getContent());
					System.out.println(data);
					Toast.makeText(getApplicationContext(), "Orden Enviada", Toast.LENGTH_SHORT).show();
				} catch (UnsupportedEncodingException e) {
					Toast.makeText(getApplicationContext(), "UnsupportedEncodingException", Toast.LENGTH_SHORT).show();
					e.printStackTrace();
				} catch (ClientProtocolException e) {
					Toast.makeText(getApplicationContext(), "ClientProtocolException", Toast.LENGTH_SHORT).show();
					e.printStackTrace();
				} catch (IOException e) {
					Toast.makeText(getApplicationContext(), "IOException", Toast.LENGTH_SHORT).show();
					e.printStackTrace();
				}

			}

		});

		btnAndroidGet.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (escucha) {
					btnAndroidGet.setText("Escuchar órdenes");
					escucha = false;
					task.cancel(true);
				} else {
					btnAndroidGet.setText("No escuchar");
					escucha = true;
					start();
				}
				
			}

			private void start() {
		    	task = new HugeWork();
				task.execute(url + "drone?acc=androidget");				
			}
		});
		
		btnAndroidDesfase.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				obtenerTime();
				androidms = (new Date()).getTime();
				mensaje = ((webms - androidms) / 1000) + "." + ((webms - androidms) % 1000);
				Toast.makeText(getApplicationContext(), mensaje, Toast.LENGTH_SHORT).show();
			}
		});

	}

	private void obtenerTime() {
		
		new Thread(new Runnable() {
		    //Thread to stop network calls on the UI thread
		    public void run() {
		        //Request the HTML

		    		try {
		    			HttpClient httpclient = new DefaultHttpClient();
		    			HttpResponse response;
		    			response = httpclient.execute(new HttpGet(url + "drone?acc=androidhora"));
		    			StatusLine statusLine = response.getStatusLine();
		    			if (statusLine.getStatusCode() == HttpStatus.SC_OK) {
		    				ByteArrayOutputStream out = new ByteArrayOutputStream();
		    				response.getEntity().writeTo(out);
		    				out.close();
		    				webms = Long.parseLong(out.toString());
		    			} else {
		    				response.getEntity().getContent().close();
		    				throw new IOException(statusLine.getReasonPhrase());
		    			}
		    		} catch (ClientProtocolException e) {
		    			e.printStackTrace();
		    		} catch (IOException e) {
		    			e.printStackTrace();
		    		}

		    }
		}).start();

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	private final String obtenerCorreo() {
		try {
			Pattern emailPattern = Patterns.EMAIL_ADDRESS;
			Account[] accounts = AccountManager.get(getBaseContext()).getAccounts();
			for (Account account : accounts)
				if (emailPattern.matcher(account.name).matches())
					return account.name;
		} catch (Exception e) {
			// TODO: handle exception
		}

		return "sincorreo";
	}

	private String inputStreamToString(InputStream is) {
		String s = "";
		String line = "";
		BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		try {
			while ((line = rd.readLine()) != null) {
				s += line;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return s;
	}
	
	class Hilo1 extends AsyncTask<String, String, String> {

		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			return null;
		}
		
	}
	
    class HugeWork extends AsyncTask<String, String, String>{

        @Override
        protected String doInBackground(String... uri) {
            String responseString = "";
        	do {
                HttpClient httpclient = new DefaultHttpClient();
                HttpResponse response;
                try {
                    response = httpclient.execute(new HttpGet(uri[0]));
                    StatusLine statusLine = response.getStatusLine();
                    if(statusLine.getStatusCode() == HttpStatus.SC_OK){
                        ByteArrayOutputStream out = new ByteArrayOutputStream();
                        response.getEntity().writeTo(out);
                        out.close();
                        responseString = out.toString();
        				publishProgress(responseString);
                    } else{
                        //Closes the connection.
                        response.getEntity().getContent().close();
                        throw new IOException(statusLine.getReasonPhrase());
                    }
                } catch (ClientProtocolException e) {
                    //TODO Handle problems..
                } catch (IOException e) {
                    //TODO Handle problems..
                }
			} while (escucha);
            return responseString;
        }
        
        @SuppressLint("SimpleDateFormat")
		@Override
		protected void onProgressUpdate(String... values) {
            if (!idaccion.equals(((String[])values)[0].split("\\|")[0])) {
            	idaccion = ((String[])values)[0].split("\\|")[0];
            	lblInfo.setText(
        			"ID: " + ((String[])values)[0].split("\\|")[0] + "\n" +
        			"Hora servidor: " + ((String[])values)[0].split("\\|")[1] + "\n" +
        			"Longitud recibida: " + ((String[])values)[0].split("\\|")[2].length() + "\n" +
        			"Hora dispositivo: " + (new SimpleDateFormat("HH:mm:ss.SSS")).format(new Date()) + "\n" +
        			"Desfase calculado: " + mensaje
            	);
            }
			super.onProgressUpdate(values);
		}


		@Override
		protected void onPostExecute(String result) {
        	System.out.println(result);
            super.onPostExecute(result);
		}

    }

}
